let board = [];
let rows = 8;
let columns = 8;

let minesCount =7;
let minesLocation = []; // "2-2", "3-4", "2-1"

let tilesClicked = 0; //ph·∫£i click v√†o h·∫øt c√°c tile s·ªë v√† tr·ª´ tile m√¨n
let flagEnabled = false;
let gameOver = false;

window.onload = function() {
    startGame();
}

//     let minesLeft = minesCount;
//     while (minesLeft > 0) {
//         let r = Math.floor(Math.random() * rows);
//         let c = Math.floor(Math.random() * columns);
//         let id = r.toString() + "-" + c.toString();
//
//         if (!minesLocation.includes(id)) {
//             minesLocation.push(id);
//             minesLeft -= 1;
//         }
//     }
// }


// khi b·∫Øt ƒë·∫ßu game: l·∫•y id c·ªßa s·ªë m√¨n v√† n√∫t ƒë·∫∑t c·ªù
function startGame() {
    document.getElementById("mines-count").innerText = minesCount;
    document.getElementById("flag-button").addEventListener("click", setFlag);
    setMines();
    // ƒë·∫∑t v·ªã tr√≠ c·ªßa m√¨n
    function setMines() {
        // minesLocation.push("0-0");
        // minesLocation.push("2-3");
        // minesLocation.push("5-6");
        // minesLocation.push("3-4");
        // minesLocation.push("1-1");
        let minesLeft = minesCount;
        while (minesLeft > 0) {
            let r = Math.floor(Math.random() * rows);
            let c = Math.floor(Math.random() * columns);
            let id = r.toString() + "-" + c.toString();

            if (!minesLocation.includes(id)) {
                minesLocation.push(id);
                minesLeft -= 1;
            }
        }
    }

    //T·∫°o b·∫£ng (m·∫£ng 8 h√†ng 8 c·ªôt)
    for (let r = 0; r < rows; r++) {
        let row = [];
        for (let c = 0; c < columns; c++) {
            //<div id="0-0"></div>
            // createElement:t·∫°o ra bi·∫øn tile ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh b·ªüi th·∫ª div
            // tile d√πng ƒë·ªÉ nh·∫≠n bi·∫øt khi click v√†o th√¨ bi·∫øt n√≥ ·ªü ƒë√¢u trong board
            let tile = document.createElement("div");
            // toString: chuy·ªÉn ƒë·ªïi ki·ªÉu Number sang chu·ªói
            tile.id = r.toString() + "-" + c.toString();
            tile.addEventListener("click", clickTile);
            // append: di chuy·ªÉn 1 th√†nh ph·∫ßn tile v√†o 1 th√†nh ph·∫ßn kh√°c (board)
            document.getElementById("board").append(tile)
            row.push(tile);
        }
        board.push(row);
    }
    console.log(board);
}
// T·∫°o h√†m kh·ªüi ƒë·ªông ch·∫ø ƒë·ªô ƒë·∫∑t c·ªù:
function setFlag(){
    if (flagEnabled){
        flagEnabled=false;
        document.getElementById("flag-button").style.backgroundColor="lightgray"
} else {
        flagEnabled = true;
        document.getElementById("flag-button").style.backgroundColor = "yellow";
    }
}

// T·∫°o h√†m k√≠ch chu·ªôt v√†o t·ª´ng √¥ ƒë·ªÉ g·∫Øn c·ªù:
function clickTile() {
    // khi d√≤ h·∫øt m√¨n => d·ª´ng game
    if (gameOver || this.classList.contains("tile-clicked")) {
        return;
        let tile = this;
        if (flagEnabled) {

            if (tile.innerText == "") {
                tile.innerText = "üö©";
            } else if (tile.innerText == "üö©") {
                tile.innerText = "";
            }
            return;
        }
        // n·∫øu h√†m mineLocation( √¥ c√≥ bom) c√≥ trong tile (√¥ vu√¥ng) => thua
        // include; ki·ªÉm tra xem mineLocation c√≥ ch·ª©a tile ko
        if (minesLocation.includes(tile.id)) {
            alert("B·∫°n qu√° ƒëen =))))");
            gameOver = true;
            revealMines();
            // return;
        }
    }

// mu·ªën bi·∫øt bao nhi√™u m√¨n xung quanh 1 s·ªë:
// split: chia 1 chu·ªói th√†nh m·ªôt m·∫£ng c√°c chu·ªói con
    let caculate = tile.id.split("-");
    let r = parseInt(caculate[0]);
    let c = parseInt(caculate[1]);

// T·∫°o h√†m hi·ªÉn th·ªã t·∫•t c·∫£ m√¨n khi clcik v√†o m√¨n
    function revealMines() {
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < columns; c++) {
                let tile = board[r][c];
                if (minesLocation.includes(tile.id)) {
                    tile.innerText = "üí£";
                    tile.style.backgroundColor = "red";
                }
            }
        }
    }


    function checkMine(r, c) {
        if (r < 0 || r >= rows || c < 0 || c >= columns) {
            return;
        }
        if (board[r][c].classList.contains("tile-clicked")) {  //ch·ª©a "tile-clicked" th√¨ l√† true, kh√¥ng th√¨ false
            return;
        }

        board[r][c].classList.add("tile-clicked"); //th√™m "tile-clicked" v√†o board
        tilesClicked += 1;

        // ki·ªÉm tra xem 8 √¥ xung quanh c√≥ m√¨n hay kh√¥ng
        let minesFound = 0;
        //3 √¥ h√†ng tr√™n
        minesFound += checkTile(r - 1, c - 1);      //top left
        minesFound += checkTile(r - 1, c);        //tops
        minesFound += checkTile(r - 1, c + 1);      //top right

        //tr√°i / ph·∫£i
        minesFound += checkTile(r, c - 1);        //left
        minesFound += checkTile(r, c + 1);        //right

        //3 √¥ h√†ng d∆∞·ªõi
        minesFound += checkTile(r + 1, c - 1);      //bottom left
        minesFound += checkTile(r + 1, c);        //bottom
        minesFound += checkTile(r + 1, c + 1);      //bottom right

        if (minesFound > 0) {
            board[r][c].innerText = minesFound;
            board[r][c].classList.add("x" + minesFound.toString());
        } else {
            //top 3
            checkMine(r - 1, c - 1);    //top left
            checkMine(r - 1, c);      //top
            checkMine(r - 1, c + 1);    //top right

            //left and right
            checkMine(r, c - 1);      //left
            checkMine(r, c + 1);      //right

            //bottom 3
            checkMine(r + 1, c - 1);    //bottom left
            checkMine(r + 1, c);      //bottom
            checkMine(r + 1, c + 1);    //bottom right
        }
        if (tilesClicked == rows * columns - minesCount) {
            document.getElementById("mines-count").innerText = "Cleared";
            gameOver = true;
        }
    }

    checkMine(r, c);

// h√†m check xem n·∫øu s·ªë c·ªôt v√† s·ªë h√†ng kh√¥ng th·ªèa m√£n 1 √¥ vu√¥ng => kh√¥ng c√≥ m√¨n
    function checkTile(r, c) {
        if (r < 0 || r >= rows || c < 0 || c >= columns) {
            return 0;
        }
        if (minesLocation.includes(r.toString() + "-" + c.toString())) {
            return 1;
        }
        return 0;
    }
}